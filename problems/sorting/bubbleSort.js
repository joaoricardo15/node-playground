/**
 * [ 2, 3, 1, 8, 9, 0, -2 ]
 *
 * i=0---------------------
 *
 * [ 2, 3, 1, 8, 9, 0, -2 ]
 *      -><-
 * [ 2, 1, 3, 8, 9, 0, -2 ]
 *               -><-
 * [ 2, 1, 3, 8, 0, 9, -2 ]
 *                  -><-
 * [ 2, 1, 3, 8, 0, -2, 9 ]
 *
 * i=1---------------------
 * [ 2, 1, 3, 8, 0, -2, 9 ]
 *   -><-
 * [ 1, 2, 3, 8, 0, -2, 9 ]
 *            -><-
 * [ 1, 2, 3, 0, 8, -2, 9 ]
 *               -><-
 * [ 1, 2, 3, 0, -2, 8, 9 ]
 *
 * i=2---------------------
 * [ 1, 2, 3, 0, -2, 8, 9 ]
 *         -><-
 * [ 1, 2, 0, 3, -2, 8, 9 ]
 *            -><-
 * [ 1, 2, 0, -2, 3, 8, 9 ]
 *
 * i=3---------------------
 * [ 1, 2, 0, -2, 3, 8, 9 ]
 *      -><-
 * [ 1, 0, 2, -2, 3, 8, 9 ]
 *         -><-
 * [ 1, 0, -2, 2, 3, 8, 9 ]
 *
 * i=4---------------------
 * [ 1, 0, -2, 2, 3, 8, 9 ]
 *   -><-
 * [ 0, 1, -2, 2, 3, 8, 9 ]
 *      -><-
 * [ 0, -2, 1, 2, 3, 8, 9 ]
 *
 * i=5---------------------
 * [ 1, 0, -2, 2, 3, 8, 9 ]
 *   -><-
 * [ 0, 1, -2, 2, 3, 8, 9 ]
 *     -><-
 * [ 0, -2, 1, 2, 3, 8, 9 ]
 *
 * i=6---------------------
 * [ 0, -2, 1, 2, 3, 8, 9 ]
 *   -><-
 * [ -2, 0, 1, 2, 3, 8, 9 ]
 */

/**
 *
 * @param {number[]} arr
 * @returns {number[]}
 */
const bubbleSort = (arr) => {
  let temp, swaped;
  for (let i = 0; i < arr.length; i++) {
    swaped = false;
    for (let j = 0; j < arr.length - 1 - i; j++) {
      if (arr[j] > arr[j + 1]) {
        temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
        swaped = true;
      }
    }

    if (!swaped) {
      break;
    }
  }

  return arr;
};

module.exports = bubbleSort;
